/*
 * Copyright (c) 2018 by Duong Thai Minh.
 * All rights reserved.
 */

package hcmut.co3003.server.util;

import static hcmut.co3003.server.util.Token.Type.*;

/**
 * @author DuongThaiMinh
 * @see hcmut.co3003.server.dal.FullInformationRecord
 * @see Token
 * @since 31/3/2018 23:14
 * <p>
 * This class define structure of every request that the server could handle.
 * <p>
 * A valid string for a record will have default format like this: <b>sensor_id MM/dd/yyyy-KK:mm:ssZ ????.??K 0.????%</b><br>
 * You can easily get a well-formed {@link String} of a record by using {@link hcmut.co3003.server.dal.FullInformationRecord}<br>
 * Just create an <code>object</code>, set all fields, then call: {@code String recordString = object.toRecord()}<br>
 */
public class RequestSet {

    /**
     * REGISTER_GATEWAY
     * <p>
     * This request
     */
    public static final Token.Type[] REGISTER_GATEWAY_REQUEST = {REGISTER_GATEWAY};

    /**
     * REGISTER_GATEWAY gateway_id
     */
    public static final Token.Type[] REGISTER_GATEWAY_RESPONSE = {REGISTER_GATEWAY, Identifier};

    /**
     * SET gateway_id sensor_id record
     */
    public static final Token.Type[] SET_REQUEST = {SET, Identifier, Identifier, TimeStamp, Temperature, Humidity};

    /**
     * Get the latest record of the sensor with specific id<br>
     * <p>
     * Main port listening: 10000<br>
     * Request: GET sensor_id<br>
     * Response data: 1 line <br>
     * The latest record have id=sensor_id as <code>String</code> with default format<br>
     * <p>
     * <b>Example:</b>
     * <p>
     * Request: {@code GET sensor-01}<br>
     * Response: {@code sensor-01 04/02/2018-17:00:00+0700 273.15K 0.500%}<br>
     */
    public static final Token.Type[] GET_REQUEST = {GET, Identifier};

    /**
     * Prepare connection for getting all records of a sensor from startTimestamp to endTimestamp<br>
     * <p>
     * Main port listening: 10000<br>
     * Request: DOWNLOAD sensor_id startTimestamp endTimestamp<br>
     * Response data: 1 line<br>
     * portNumber OTP<br>
     * portNumber: a integer specify which port the server has opened to send records via<br>
     * OTP: a 64-char string randomly generated by server for authentication connection<br>
     */
    public static final Token.Type[] DOWNLOAD_REQUEST = {DOWNLOAD, Identifier, TimeStamp, TimeStamp};

    /**
     * Get all records which have been prepared by server since server receiving {@literal DOWNLOAD_REQUEST}
     */
    public static final Token.Type[] DOWNLOAD_GET_REQUEST = {GET, FILE, Otp};


}
